void solid_color(CRGB color) {
  fill_solid(leds, NUM_LEDS, color);
  FastLED.show();
}

void color_wipe(CRGB color, int delay_ms) {
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = color;
    FastLED.show();
    delay(delay_ms);
  }
}

void rainbow_cycle(int delay_ms) {
  static uint8_t hue = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV((hue + i * 4), 255, 255);
  }
  hue++;
  FastLED.show();
  delay(delay_ms);
}

void theater_chase(CRGB color, int delay_ms) {
  static bool reverse = false;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = (i % 3 == 0) ? color : CRGB::Black;
  }
  FastLED.show();
  delay(delay_ms);
}

void strobe_light(CRGB color, int delay_ms) {
  fill_solid(leds, NUM_LEDS, color);
  FastLED.show();
  delay(delay_ms);
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  FastLED.show();
  delay(delay_ms);
}

void random_colors() {
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(random8(), 255, 255);
  }
  FastLED.show();
  delay(100);
}

void fade_in_out(CRGB color, int delay_ms) {
  for (int k = 0; k < 255; k++) {
    fill_solid(leds, NUM_LEDS, color.fadeLightBy(255 - k));
    FastLED.show();
    delay(delay_ms);
  }
  for (int k = 255; k > 0; k--) {
    fill_solid(leds, NUM_LEDS, color.fadeLightBy(255 - k));
    FastLED.show();
    delay(delay_ms);
  }
}


void knight_rider(int delay_ms) {
  static uint8_t position = 0;
  static bool direction = true;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  leds[position] = CRGB::Red;
  position += direction ? 1 : -1;
  if (position == 0 || position == NUM_LEDS - 1) direction = !direction;
  FastLED.show();
  delay(delay_ms);
}


void sparkle(CRGB color, int delay_ms) {
  if (random8() < 50) {
    leds[random16(NUM_LEDS)] = color;
  }
  fadeToBlackBy(leds, NUM_LEDS, 10);
  FastLED.show();
  delay(delay_ms);
}

void gradient_fade(CRGB color1, CRGB color2, int delay_ms) {
  static uint8_t blend = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color1, color2, blend);
  }
  blend++;
  FastLED.show();
  delay(delay_ms);
}


void fire_effect() {
  // static uint8_t heat[NUM_LEDS];
  for (int i = 0; i < NUM_LEDS; i++) {
    heat[i] = qsub8(heat[i], random8(0, 10));
    leds[i] = HeatColor(heat[i]);
  }
  heat[random8(NUM_LEDS)] = 255;
  FastLED.show();
  delay(20);
}

void twinkle_stars() {
  if (random8() < 50) {
    leds[random16(NUM_LEDS)] = CRGB::White;
  }
  fadeToBlackBy(leds, NUM_LEDS, 10);
  FastLED.show();
  delay(50);
}

void comet_tail() {
  static uint8_t position = 0;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  leds[position] = CRGB::White;
  for (int i = 1; i < 10; i++) {
    leds[(position + i) % NUM_LEDS] = CHSV(0, 0, 255 - (i * 25));
  }
  position = (position + 1) % NUM_LEDS;
  FastLED.show();
  delay(30);
}

void pulse_wave() {
  static uint8_t wave = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(wave + (i * 4), 255, sin8(i + wave));
  }
  wave++;
  FastLED.show();
  delay(20);
}

void confetti() {
  if (random8() < 50) {
    leds[random16(NUM_LEDS)] = CHSV(random8(), 255, 255);
  }
  fadeToBlackBy(leds, NUM_LEDS, 10);
  FastLED.show();
  delay(20);
}


void rainbow_fade(int delay_ms) {
  static uint8_t hue = 0;
  fill_solid(leds, NUM_LEDS, CHSV(hue, 255, 255));
  hue++;
  FastLED.show();
  delay(delay_ms);
}


void color_bounce(CRGB color1, CRGB color2, int delay_ms) {
  static uint8_t pos1 = 0, pos2 = NUM_LEDS / 2;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  leds[pos1] = color1;
  leds[pos2] = color2;
  pos1 = (pos1 + 1) % NUM_LEDS;
  pos2 = (pos2 + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}


void color_wave(CRGB color, int delay_ms) {
  static uint8_t wave = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, sin8(i * 4 + wave));
  }
  wave++;
  FastLED.show();
  delay(delay_ms);
}

void random_blink(CRGB color, int delay_ms) {
  if (random8() < 50) {
    leds[random16(NUM_LEDS)] = color;
  } else {
    leds[random16(NUM_LEDS)] = CRGB::Black;
  }
  FastLED.show();
  delay(delay_ms);
}

void color_chase(CRGB color, int delay_ms) {
  static uint8_t position = 0;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  leds[position] = color;
  position = (position + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}


void color_gradient(CRGB color1, CRGB color2, int delay_ms) {
  static uint8_t blend = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color1, color2, map(i, 0, NUM_LEDS - 1, 0, blend));
  }
  blend++;
  FastLED.show();
  delay(delay_ms);
}


void color_pulse(CRGB color, int delay_ms) {
  static uint8_t brightness = 0;
  static bool direction = true;
  fill_solid(leds, NUM_LEDS, color.fadeLightBy(255 - brightness));
  FastLED.show();
  brightness += direction ? 1 : -1;
  if (brightness == 0 || brightness == 255) direction = !direction;
  delay(delay_ms);
}


void color_ripple(CRGB color, int delay_ms) {
  static static uint8_t center = NUM_LEDS / 2;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, abs(i - center) * 4);
  }
  center = (center + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}


void color_burst(CRGB color, int delay_ms) {
  static uint8_t position = 0;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  for (int i = 0; i < 5; i++) {
    leds[(position + i) % NUM_LEDS] = color;
  }
  position = (position + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}


void color_sweep(CRGB color, int delay_ms) {
  static uint8_t position = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = (i == position) ? color : CRGB::Black;
  }
  position = (position + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}

void fireworks(int delay_ms) {
  if (random8() < 50) {
    leds[random16(NUM_LEDS)] = CHSV(random8(), 255, 255);
  }
  fadeToBlackBy(leds, NUM_LEDS, 20);
  FastLED.show();
  delay(delay_ms);
}


void meteor_rain(CRGB color, int delay_ms) {
  static uint8_t position = 0;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  for (int i = 0; i < 5; i++) {
    leds[(position + i) % NUM_LEDS] = color;
  }
  position = (position + 1) % NUM_LEDS;
  fadeToBlackBy(leds, NUM_LEDS, 20);
  FastLED.show();
  delay(delay_ms);
}


void lightning(int delay_ms) {
  if (random8() < 10) {
    fill_solid(leds, NUM_LEDS, CRGB::White);
    FastLED.show();
    delay(random8(50, 200));
  }
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  FastLED.show();
  delay(delay_ms);
}


void color_shift(int delay_ms) {
  static uint8_t hue = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(hue + random8(30), 255, 255);
  }
  hue++;
  FastLED.show();
  delay(delay_ms);
}


void color_fade_out(CRGB color, int delay_ms) {
  static uint8_t position = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, abs(i - position) * 4);
  }
  position = (position + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}

void rainbow_comet(int delay_ms) {
  static uint8_t position = 0;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  for (int i = 0; i < 10; i++) {
    leds[(position + i) % NUM_LEDS] = CHSV((position * 4) + (i * 10), 255, 255);
  }
  position = (position + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}


void color_waves(CRGB color, int delay_ms) {
  static uint8_t wave = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, sin8(i * 4 + wave));
  }
  wave++;
  FastLED.show();
  delay(delay_ms);
}

void random_pulse(CRGB color, int delay_ms) {
  if (random8() < 50) {
    leds[random16(NUM_LEDS)] = color;
  } else {
    leds[random16(NUM_LEDS)] = CRGB::Black;
  }
  FastLED.show();
  delay(delay_ms);
}

void color_gradient_sweep(CRGB color1, CRGB color2, int delay_ms) {
  static uint8_t offset = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color1, color2, map((i + offset) % NUM_LEDS, 0, NUM_LEDS - 1, 0, 255));
  }
  offset++;
  FastLED.show();
  delay(delay_ms);
}

void color_bounce_wave(CRGB color1, CRGB color2, int delay_ms) {
  static uint8_t wave1 = 0, wave2 = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color1, color2, sin8(i * 4 + wave1) + sin8(i * 4 + wave2));
  }
  wave1++;
  wave2--;
  FastLED.show();
  delay(delay_ms);
}

void color_spiral(CRGB color, int delay_ms) {
  static uint8_t offset = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV((offset + i * 4) % 255, 255, 255);
  }
  offset++;
  FastLED.show();
  delay(delay_ms);
}

void color_explosion(CRGB color, int delay_ms) {
  static static uint8_t center = NUM_LEDS / 2;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, abs(i - center) * 4);
  }
  center = (center + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}

void color_ripple_wave(CRGB color, int delay_ms) {
  static uint8_t wave = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, sin8(abs(i - NUM_LEDS / 2) * 4 + wave));
  }
  wave++;
  FastLED.show();
  delay(delay_ms);
}

void color_fade_in_out_wave(CRGB color, int delay_ms) {
  static uint8_t brightness = 0;
  static bool direction = true;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = color.fadeLightBy(255 - (brightness + sin8(i * 4)));
  }
  brightness += direction ? 1 : -1;
  if (brightness == 0 || brightness == 255) direction = !direction;
  FastLED.show();
  delay(delay_ms);
}

void color_chase_rainbow(int delay_ms) {
  static uint8_t position = 0;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  leds[position] = CHSV(position * 4, 255, 255);
  position = (position + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}

// 41. Breathing Light
void breathing_light(CRGB color, int delay_ms) {
  static uint8_t brightness = 0;
  static bool direction = true;
  fill_solid(leds, NUM_LEDS, color.fadeLightBy(255 - brightness));
  FastLED.show();
  brightness += direction ? 1 : -1;
  if (brightness == 0 || brightness == 255) direction = !direction;
  delay(delay_ms);
}

// 42. Random Sparkles
void random_sparkles(CRGB color, int delay_ms) {
  if (random8() < 50) {
    leds[random16(NUM_LEDS)] = color;
  }
  fadeToBlackBy(leds, NUM_LEDS, 10);
  FastLED.show();
  delay(delay_ms);
}

// 43. Color Bounce Rainbow
void color_bounce_rainbow(int delay_ms) {
  static uint8_t pos1 = 0, pos2 = NUM_LEDS / 2;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  leds[pos1] = CHSV(pos1 * 4, 255, 255);
  leds[pos2] = CHSV(pos2 * 4, 255, 255);
  pos1 = (pos1 + 1) % NUM_LEDS;
  pos2 = (pos2 + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}

// 44. Color Gradient Fade
void color_gradient_fade(CRGB color1, CRGB color2, int delay_ms) {
  static uint8_t blend = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color1, color2, map(i, 0, NUM_LEDS - 1, 0, blend));
  }
  blend++;
  FastLED.show();
  delay(delay_ms);
}

// 45. Color Wave Pulse
void color_wave_pulse(CRGB color, int delay_ms) {
  static uint8_t wave = 0;
  static uint8_t brightness = 0;
  static bool direction = true;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, sin8(i * 4 + wave));
  }
  wave++;
  brightness += direction ? 1 : -1;
  if (brightness == 0 || brightness == 255) direction = !direction;
  FastLED.show();
  delay(delay_ms);
}

// 46. Color Spiral Wave
void color_spiral_wave(CRGB color, int delay_ms) {
  static uint8_t offset = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, sin8((i + offset) * 4));
  }
  offset++;
  FastLED.show();
  delay(delay_ms);
}

// 47. Color Explosion Wave
void color_explosion_wave(CRGB color, int delay_ms) {
  static static uint8_t center = NUM_LEDS / 2;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, abs(i - center) * 4);
  }
  center = (center + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}

// 48. Color Ripple Pulse
void color_ripple_pulse(CRGB color, int delay_ms) {
  static uint8_t wave = 0;
  static uint8_t brightness = 0;
  static bool direction = true;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = blend_colors(color, CRGB::Black, sin8(abs(i - NUM_LEDS / 2) * 4 + wave));
  }
  wave++;
  brightness += direction ? 1 : -1;
  if (brightness == 0 || brightness == 255) direction = !direction;
  FastLED.show();
  delay(delay_ms);
}

// 49. Color Fade In/Out Spiral
void color_fade_in_out_spiral(CRGB color, int delay_ms) {
  static uint8_t brightness = 0;
  static bool direction = true;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = color.fadeLightBy(255 - (brightness + sin8(i * 4)));
  }
  brightness += direction ? 1 : -1;
  if (brightness == 0 || brightness == 255) direction = !direction;
  FastLED.show();
  delay(delay_ms);
}

// 50. Color Chase Spiral
void color_chase_spiral(CRGB color, int delay_ms) {
  static uint8_t position = 0;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  leds[position] = CHSV(position * 4, 255, 255);
  position = (position + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}

// 1. Aurora Effect
void aurora_effect(int delay_ms) {
  static uint8_t color_picker = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    if (random8() < 50) { // Probabilitas rendah untuk memilih biru atau merah
      leds[i] = CHSV(color_picker, 255, 255); // Menggunakan warna HSV untuk transisi halus
    } else {
      leds[i] = CHSV(96, 255, random8(128, 255)); // Hijau dan variasi terang
    }
  }
  color_picker++;
  FastLED.show();
  delay(delay_ms);
}

// 2. Rainbow Wave
void rainbow_wave(int delay_ms) {
  static uint8_t hue = 0;
  for (int i = 0; i < NUM_LEDS; i++) {
    leds[i] = CHSV(hue + (i * 4), 255, 255); // Nilai hue berubah berdasarkan posisi LED
  }
  hue++; // Meningkatkan hue untuk menggeser warna
  FastLED.show();
  delay(delay_ms);
}

// 3. Chasing Dots
void chasing_dots(int delay_ms) {
  static uint8_t pos1 = 0, pos2 = NUM_LEDS / 2;
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  leds[pos1] = CRGB::Red;
  leds[pos2] = CRGB::Blue;
  pos1 = (pos1 + 1) % NUM_LEDS;
  pos2 = (pos2 + 1) % NUM_LEDS;
  FastLED.show();
  delay(delay_ms);
}
